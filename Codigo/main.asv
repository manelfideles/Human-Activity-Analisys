close all;
clear;

matfiles = dir( fullfile('dataset\', '*.txt' ));

fs = 50;

%Activity labels
labels_fid = fopen('dataset\activity_labels.txt');
activity_labels = textscan(labels_fid, '%d %s');
activity_labels = activity_labels{2};

%Activity intervals
f = fopen('dataset\labels.txt');
lines = textscan(f, '%d %d %d %d %d');
experiment_id = lines{1};
user_id = lines{2};
activity_id = lines{3};
label_start = lines{4};
label_end = lines{5};
fclose(f);

every_spmW = [];
every_spmWU = [];
every_spmWD = [];

maxFreqDinamicX = {};
maxFreqDinamicY = {};
maxFreqDinamicZ = {};
maxFreqNonDinamicX = {};
maxFreqNonDinamicY = {};
maxFreqNonDinamicZ = {};

maxAmpDinamicX = {};
maxAmpDinamicY = {};
maxAmpDinamicZ = {};
maxAmpNonDinamicX = {};
maxAmpNonDinamicY = {};
maxAmpNonDinamicZ = {};

staticDuration = {};
transitionDuration = {};

for i=1:1 %length(matfiles) - 2
    
    % 3 - IMPORTING AND PLOTTING RAW DATA
    % open data file
    [acc_x, acc_y, acc_z] = openExperimentFile(matfiles, i);
    experiment_window = find(experiment_id == i);
    sample_time = linspace(1, length(acc_x) / (fs * 60), length(acc_x));
    
    % plot raw data and label activities from file
    %figure(i);
%     plotExperiment(sample_time, acc_x, acc_y, ...
%         acc_z, label_start, label_end, activity_labels, ...
%         activity_id, experiment_window);
    
    % 4 - ANALYSIS
    % 4.1 - Calculating the DFT and comparing windows
    W = getActivityVectors("W", label_start, label_end, acc_x, acc_y, acc_z, experiment_window, activity_id, activity_labels);
    WU = getActivityVectors("W-U", label_start, label_end, acc_x, acc_y, acc_z, experiment_window, activity_id, activity_labels);
    WD = getActivityVectors("W-D", label_start, label_end, acc_x, acc_y, acc_z, experiment_window, activity_id, activity_labels);
    SIT = getActivityVectors("SIT", label_start, label_end, acc_x, acc_y, acc_z, experiment_window, activity_id, activity_labels);
    STAND = getActivityVectors("STAND", label_start, label_end, acc_x, acc_y, acc_z, experiment_window, activity_id, activity_labels);
    LAY = getActivityVectors("LAY", label_start, label_end, acc_x, acc_y, acc_z, experiment_window, activity_id, activity_labels);
    STAND2SIT = getActivityVectors("STAND-SIT", label_start, label_end, acc_x, acc_y, acc_z, experiment_window, activity_id, activity_labels);
    SIT2STAND = getActivityVectors("SIT-STAND", label_start, label_end, acc_x, acc_y, acc_z, experiment_window, activity_id, activity_labels);
    SIT2LIE = getActivityVectors("SIT-LIE", label_start, label_end, acc_x, acc_y, acc_z, experiment_window, activity_id, activity_labels);
    LIE2SIT = getActivityVectors("LIE-SIT", label_start, label_end, acc_x, acc_y, acc_z, experiment_window, activity_id, activity_labels);
    STAND2LIE = getActivityVectors("STAND-LIE", label_start, label_end, acc_x, acc_y, acc_z, experiment_window, activity_id, activity_labels);
    LIE2STAND = getActivityVectors("LIE-STAND", label_start, label_end, acc_x, acc_y, acc_z, experiment_window, activity_id, activity_labels);
    
    DINAMIC = {W, WU, WD};
    STATIC = {SIT, LAY, STAND};
    TRANSITION = {STAND2SIT, SIT2STAND, SIT2LIE, LIE2SIT, STAND2LIE, LIE2STAND};
    
    % DFT for raw signals
    dftDINAMIC = calcActivityDFT(DINAMIC, fs);
    dftSTATIC = calcActivityDFT(STATIC, fs);
    dftTRANSITION = calcActivityDFT(TRANSITION, fs);
    
    % Raw signal w/ windowing
    % Hann (good for most cases, eliminates discontinuities)
%     DINAMICwin = viewThroughWindow(DINAMIC, "hann");
%     STATICwin = viewThroughWindow(STATIC, "hann");
%     TRANSITIONwin = viewThroughWindow(TRANSITION, "hann");
    
    % Hamming (good freq.res, detects fair amount of m components)
    DINAMICwin = viewThroughWindow(DINAMIC, "hamming");
    STATICwin = viewThroughWindow(STATIC, "hamming");
    TRANSITIONwin = viewThroughWindow(TRANSITION, "hamming");
    
    % DFT w/ windowing
    % Hann
%     dftDINAMICwin = viewThroughWindow(dftDINAMIC, "hann");
%     dftSTATICwin = viewThroughWindow(dftSTATIC, "hann");
%     dftTRANSITIONwin = viewThroughWindow(dftTRANSITION, "hann");
    
    %Hamming
    dftDINAMICwin = viewThroughWindow(dftDINAMIC, "hamming");
    dftSTATICwin = viewThroughWindow(dftSTATIC, "hamming");
    dftTRANSITIONwin = viewThroughWindow(dftTRANSITION, "hamming");
    
    % 4.2 - Step stats for dynamic activities
    spmW = getSPM(dftDINAMICwin{1}, "false", fs);
    spmWU = getSPM(dftDINAMICwin{2}, "false", fs);
    spmWD = getSPM(dftDINAMICwin{3}, "false", fs);
    every_spmW(i) = spmW;
    every_spmWU(i) = spmWU;
    every_spmWD(i) = spmWD;
        
    % 4.3 - Distinguishing dynamic from static/transition activities    
    % Comparing signals max-frequency-wise
%     [Dx, Dy, Dz, NDx, NDy, NDz] = plotMaxFrequency(dftDINAMICwin, dftSTATICwin, dftTRANSITIONwin, fs);
%     maxFreqDinamicX{i} = Dx;
%     maxFreqDinamicY{i} = Dy;
%     maxFreqDinamicZ{i} = Dz;
%     maxFreqNonDinamicX{i} = NDx;
%     maxFreqNonDinamicY{i} = NDy;
%     maxFreqNonDinamicZ{i} = NDz;

    % Comparing signals max-amplitude-wise (para fazer o despiste e aumentar a sensibilidade)
%     [AmpDx, AmpDy, AmpDz, AmpNDx, AmpNDy, AmpNDz] = plotMaxAmplitude(DINAMICwin, STATICwin, TRANSITIONwin);
%     maxAmpDinamicX{i} = AmpDx;
%     maxAmpDinamicY{i} = AmpDy;
%     maxAmpDinamicZ{i} = AmpDz;
%     maxAmpNonDinamicX{i} = AmpNDx;
%     maxAmpNonDinamicY{i} = AmpNDy;
%     maxAmpNonDinamicZ{i} = AmpNDz;
    
    % 4.4 - Distinguishing non-dynamic activities
    
    % Comparing signals period-wise
%     [St, Tt] = plotDuration(STATICwin, TRANSITIONwin, fs);
%     staticDuration{i} = St;
%     transitionDuration{i} = Tt;
    
    
    % 4.5 - Distinguishing dynamic activities
%     plotAxis(dftDINAMICwin, fs, sample_time, "dft", 2);
%     plotAxis(DINAMICwin, fs, sample_time, "raw", 2);
    [maxW, maxWU, maxWD] = plotMaxDFTAmplitude(dftDINAMICwin);


    % 5 - STFT
    % Janela de tamanho 0.002 menor que a duração do sinal
%     getSTFT(acc_z, fs);
    
end

% Differentiate static and transitions from dinamic activities
% plotAllMaxFrequencies(maxFreqDinamicX, maxFreqDinamicY, maxFreqDinamicZ, ...
%     maxFreqNonDinamicX, maxFreqNonDinamicY, maxFreqNonDinamicZ);

% plotAllMaxAmplitudes(maxAmpDinamicX, maxAmpDinamicY, maxAmpDinamicZ, ...
%     maxAmpNonDinamicX, maxAmpNonDinamicY, maxAmpNonDinamicZ);

% Differentiate static from transitional activities
% plotAllDurations(staticDuration, transitionDuration);

% Differenciate dynamic activities from each other
 plotMaxDFTAmplitude(dftDINAMICwin);


% Correct outliers and calculate stats for SPM

every_smpW_outliers_filled = filloutliers(every_spmW, 'pchip');
every_smpWU_outliers_filled = filloutliers(every_spmWU, 'pchip');
every_smpWD_outliers_filled = filloutliers(every_spmWD, 'pchip');

mean_spm_W = mean(every_smpW_outliers_filled);
mean_spm_WU = mean(every_smpWU_outliers_filled);
mean_spm_WD = mean(every_smpWD_outliers_filled);

std_spm_W = std(every_smpW_outliers_filled);
std_spm_WU = std(every_smpWU_outliers_filled);
std_spm_WD = std(every_smpWD_outliers_filled);
